@startuml

interface "<<Interface>>\nDataContainerInterface" <BaseDataSetInterface> {
  +get_train_data(): BaseDataSetInterface
  +get_test_data(): BaseDataSetInterface
  +get_validation_data(): BaseDataSetInterface
  +get_all_data(): BaseDataSetInterface
}

abstract class DataContainer <BaseDataSetInterface> {
}
"<<Interface>>\nDataContainerInterface" <|.. DataContainer : implements


interface "<<Interface>>\nBaseDataSetInterface" {
  +get_storage_format()
  '+persist()

}

"<<Interface>>\nDataContainerInterface" -right-> "<<Interface>>\nBaseDataSetInterface": "DataContainer is generic in DataSet\n(needs to be parameterized by a *concrete* DataSet type)"

interface "<<Interface>>\nStructuredDataSetInterface"{
  +<<create>>from_pandas(data: pd.DataFrame)
  +<<create>>from_numpy_array(data: np.ndarray)
  +to_pandas(): pd.DataFrame
  +to_numpy_array(): np.ndarray
}

interface "<<Interface>>\nSemiStructuredDataSetInterface"{
  +<<create>>from_json(data: str)
  +<<create>>from_jsonlines(data: str)
  +<<create>>from_dict(data: dict)
  +<<create>>from_list_of_dicts(data: dict)
  +to_json(): str
  +to_jsonlines(): str
  +to_dict(): dict
  +to_list_of_dicts(): list[dict]
}

interface "<<Interface>>\nFileDataSetInterface" {
  +<<create>>from_directory(path: DirectoryPath)
  +<<create>>from_files(paths: list[FilePath])
  +to_directory(): DirectoryPath
  +to_files(): list[FilePath]
}

"<<Interface>>\nBaseDataSetInterface" <|.. "<<Interface>>\nStructuredDataSetInterface" : implements
"<<Interface>>\nBaseDataSetInterface" <|.. "<<Interface>>\nSemiStructuredDataSetInterface" : implements
"<<Interface>>\nBaseDataSetInterface" <|.. "<<Interface>>\nFileDataSetInterface" : implements

DataContainer -right-> "<<Interface>>\nStructuredDataSetInterface" : is parameterized by\nobject implementing\n DataSet interface


'Hidden arrows to fix left-to-right order
"<<Interface>>\nStructuredDataSetInterface" -[hidden]right-> "<<Interface>>\nSemiStructuredDataSetInterface"


@enduml
