@startuml

interface "<<Interface>>\nDataContainerInterface" <BaseDataSetInterface> {
  +get_train_data(): BaseDataSetInterface
  +get_test_data(): BaseDataSetInterface
  +get_validation_data(): BaseDataSetInterface
  +get_all_data(): BaseDataSetInterface
}

abstract class DataContainer <BaseDataSetInterface> {
}
"<<Interface>>\nDataContainerInterface" <|.. DataContainer : implements


interface "<<Interface>>\nBaseDataSetInterface" {
  +<<create>>from_format(format: BaseDataFormat)
  +to_format(format: BaseDataFormat)
  +get_storage_format()
  +write(format: BaseDataFormat)

}

"<<Interface>>\nDataContainerInterface" -right-> "<<Interface>>\nBaseDataSetInterface": is generic in (needs to be parameterized by a *sub*type of)

interface "<<Interface>>\nStructuredDataSetInterface"{
  +<<create>>from_format(format: StructuredDataFormat)
  +to_format(format: StructuredDataFormat)
}

interface "<<Interface>>\nSemiStructuredDataSetInterface"{
  +<<create>>from_format(format: SemiStructuredDataFormat)
  +to_format(format: SemiStructuredDataFormat)
}

interface "<<Interface>>\nFileDataSetInterface" {
  +<<create>>from_format(format: FileFormat)
  +to_format(format: FileFormat)
}

"<<Interface>>\nBaseDataSetInterface" <|.. "<<Interface>>\nStructuredDataSetInterface" : implements
"<<Interface>>\nBaseDataSetInterface" <|.. "<<Interface>>\nSemiStructuredDataSetInterface" : implements
"<<Interface>>\nBaseDataSetInterface" <|.. "<<Interface>>\nFileDataSetInterface" : implements

"<<Interface>>\nFileDataSetInterface" -right-> StructuredDataFormat : Specific interfaces \nuse *concrete* type\nin its method signature

DataContainer -right-> "<<Interface>>\nStructuredDataSetInterface" : is parameterized by\nobject implementing\n DataSet interface

abstract class BaseDataFormat

enum StructuredDataFormat << (E,green) Enum >> {
  PARQUET
  CSV
  JSONL
  PD_DATAFRAME
}

enum SemiStructuredDataFormat << (E,green) Enum >> {
  JSONL
}

enum FileFormat << (E,green) Enum >> {
  PATH
  PATH_LIST
}

BaseDataFormat <|-- StructuredDataFormat : is subtype\n(virtual subclass) of
BaseDataFormat <|-- SemiStructuredDataFormat : is subtype\n(virtual subclass) of
BaseDataFormat <|-- FileFormat : is subtype\n(virtual subclass) of

'Hidden arrows to fix left-to-right order
StructuredDataFormat -[hidden]right-> SemiStructuredDataFormat
"<<Interface>>\nStructuredDataSetInterface" -[hidden]right-> "<<Interface>>\nSemiStructuredDataSetInterface"

"<<Interface>>\nBaseDataSetInterface" -right-> BaseDataFormat : Base interface uses *abstract* type in its method signature

class "DataContainer <StructuredDataSetInterface>"
DataContainer <.. "DataContainer <StructuredDataSetInterface>" : <<bind>>\nBaseDataSetInterface::StructuredDataSetInterface
"<<Interface>>\nStructuredDataSetInterface" <.. "DataContainer <StructuredDataSetInterface>"

class "DataContainer <SemiStructuredDataSetInterface>"
DataContainer <.. "DataContainer <SemiStructuredDataSetInterface>" : <<bind>>\nBaseDataSetInterface::\nSemiStructuredDataSetInterface
"<<Interface>>\nSemiStructuredDataSetInterface" <.. "DataContainer <SemiStructuredDataSetInterface>"

"DataContainer <StructuredDataSetInterface>" -[hidden]down-> "DataContainer <SemiStructuredDataSetInterface>"

@enduml
